#Legendre polynomial with FDM
import matplotlib.pyplot as plt
import numpy as np
def f(n):
	xi=-0.95
	xf=0.95
	x,h=np.linspace(xi,xf,n,retstep=True)
	y1=0.5*(5*x**3-3*x)
	def p(x):
		return -(2*x)/(1-x**2)
	def q(x):
		return (12)/(1-x**2)
		
	r=0
		
	u=1/h**2+p(x)*1/(2*h)
	v=-2/h**2+q(x)
	w=1/h**2-p(x)*1/(2*h)
		
	A=np.zeros((n,n))
	for i in range(1,n-1):
		A[i][i-1]=w[i]
		A[i][i]=v[i]
		A[i][i+1]=u[i]
	A[0][0]=1
	A[-1][-1]=1
	b=np.zeros(n)
	for i in range(1,n-1):
		b[i]=r
	b[0]=-0.7184375
	b[-1]=0.7184375
	y=np.linalg.solve(A,b)
	s=0
	N=len(y)
	for i in range(N):
		s=s+(y[i]-y1[i])**2
	e=(s/N)**0.5
	return e,x,y,y1
	
dd,nn=[],[]
n=100
for i in range(20):
	nn.append(n)
	dd.append(f(n)[0])
	n=n+100
	
plt.subplot(1,2,1)
plt.title("Error with variation of points",size=20)
plt.xlabel("No. of points----->",size=20)
plt.ylabel("Error------->",size=20)
plt.plot(nn,dd)

e,x,y,y1=f(100)
plt.subplot(1,2,2)
plt.title("Legendre Polynomial",size=20)
plt.xlabel("x---->",size=20)
plt.ylabel("y(x)------>",size=20)
plt.plot(x,y,label='numerical soln')
plt.plot(x,y1,'ro',label='analytic soln')
plt.axhline()
plt.axvline()
plt.legend()
plt.show()

	

