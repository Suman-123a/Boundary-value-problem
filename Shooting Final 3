#Hermite polynomial
#y"-2xy'+2ny=0
import matplotlib.pyplot as plt
import numpy as np
def f(x,y,z,N):
	return (2*z*x-2*N*y)
def D(xi,xf,y,z,n,N):
	xx,yy=[],[]
	h=(xf-xi)/(n-1)
	for i in range(n):
		x=xi+i*h
		xx.append(x)
		ya=y
		y=y+h*z
		z=z+h*f(x,ya,z,N)
		yy.append(y)
	return xx,yy
N=3
xi=0
xf=2
z1,z2=0.1,0.3
yi=0
yf=40
n=20000
x1,w1=D(xi,xf,yi,z1,n,N)
x2,w2=D(xi,xf,yi,z2,n,N)
e=0.00001
while abs(w2[-1]-w1[-1])>e:
	z3=z2+(z2-z1)*(yf-w2[-1])/(w2[-1]-w1[-1])
	t1,t2=D(xi,xf,yi,z3,n,N)
	w1[-1]=w2[-1]
	w2[-1]=t2[-1]
	z1=z2
	z2=z3
x,y=D(xi,xf,yi,z3,n,N)
print(z3)
plt.plot(x,y,label="Numerical soln")
Xo=np.linspace(xi,xf,30)
#Yo=4*Xo**2-2
Yo=8*Xo**3-12*Xo
#Yo=16*Xo**4-48*Xo**2+12

plt.plot(Xo,Yo,'ro',label='actual soln')
plt.axhline()
plt.axvline()
plt.title("Hermite Polynomial",size=20)
plt.xlabel("X------>",size=20)
plt.ylabel("Y------->",size=20)
plt.legend()
plt.show()
